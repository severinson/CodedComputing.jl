using Distributions

@testset "less_than_lower_bound" begin
    nworkers = 9
    nsubpartitions = 160.0
    θs = fill(1/nworkers, nworkers)
    ps = fill(nsubpartitions, nworkers)

    # values recorded on eX3 with low variance and very low comm. latency relative to comp.
    comp_mcs = [255.07814185599995, 235.33940168554452, 253.72451957702958, 116.82766857029705, 116.75048824871284, 116.63288112475249, 126.99890071128709, 126.4382596942574, 117.12455760475244]
    comp_vcs = [0.0027557071631392205, 0.003592251480945663, 0.002281988669487589, 0.0007248118462346298, 0.0005408877863892769, 0.0005133790987450482, 0.0005865578758950107, 0.0006378358097673953, 0.0005586345559702721]    
    comm_mcs = [3.373097029702779e-5, 3.189267326732839e-5, 3.427457425742762e-5, 3.50826633663372e-5, 3.664775247524789e-5, 3.760737623762412e-5, 3.5680287128712425e-5, 3.737996039603971e-5, 3.6443900990098125e-5]
    comm_vcs = [1.4755830783262175e-12, 1.5582646160146614e-12, 1.3494372741908877e-12, 2.0233815302431064e-12, 2.7092806020993726e-12, 2.554836195077552e-12, 1.7668490363708934e-12, 1.5867281370452314e-12, 1.8507092575245513e-12]    
   
    dzs = CodedComputing.distribution_from_mean_variance.(Gamma, comp_mcs .* θs ./ ps, comp_vcs .* θs ./ ps)
    dys = CodedComputing.distribution_from_mean_variance.(Gamma, comm_mcs, comm_vcs)

    correct = [-6787.780734619605, -5997.6993965555075, -7030.083983125667, -4542.376367667996, -4266.766708613465, -4204.885092182273, -4709.103013914913, -4746.332511515265, -4315.852500222745]
    @test CodedComputing.less_than_lower_bound(dzs, dys) ≈ correct
end

@testset "optimizer (comp. higher than comm.)" begin
    nworkers = 10
    nwait = nworkers
    nslow = 3    
    nsubpartitions = 160.0
    θs = fill(1/nworkers, nworkers)
    ps = fill(nsubpartitions, nworkers)

    # per-worker compute latency
    comp_ms = fill(1.0, nworkers)
    comp_ms[1:nslow] .*= 2    
    comp_vs = comp_ms ./ 100
    comp_mcs = comp_ms ./ (θs ./ ps)
    comp_vcs = comp_vs ./ (θs ./ ps)

    # per-worker communication latency
    comm_mcs = fill(1e-2, nworkers)
    comm_vcs = comm_mcs ./ 100
    
    sim_nwait = floor(Int, nworkers/2)
    comp_distributions = [Gamma() for _ in 1:nworkers]
    comm_distributions = [Gamma() for _ in 1:nworkers]
    sim = EventDrivenSimulator(;nwait=sim_nwait, nworkers, comm_distributions, comp_distributions)
    min_processed_fraction = sim_nwait / nworkers / nsubpartitions

    # balanced mode
    ps, loss, loss0 = CodedComputing.optimize!(ps, ps, sim; θs, comp_mcs, comp_vcs, comm_mcs, comm_vcs, min_processed_fraction, time_limit=2.0)
    println("ps: $ps")
    @test loss < Inf    

    # check that the slow workers have about twice as many partitions
    slows = ps[1:nslow]
    slows_mean = mean(slows)
    fasts = ps[nslow+1:end]
    fasts_mean = mean(fasts)
    @test 2 / mean(slows) ≈ 1 / mean(fasts) rtol=0.1

    # check that all slow and all fast workers were given approx. the same number of partitions as each other
    for v in slows
        @test v ≈ slows_mean rtol=0.1
    end
    for v in fasts
        @test v ≈ fasts_mean rtol=0.1
    end

    # check that the avg. latency is uniform (within some margin)
    ms = comp_mcs .* θs ./ ps .+ comm_mcs
    println("ms: $ms")
    μ = mean(ms)
    for i in 1:nworkers
        @test ms[i] ≈ μ rtol=0.1
    end

    # aggressive mode
    ps .= nsubpartitions
    ps, loss, loss0 = CodedComputing.optimize!(ps, ps, sim; θs, comp_mcs, comp_vcs, comm_mcs, comm_vcs, min_processed_fraction, time_limit=2, aggressive=true, min_latency=-1.0)
    println("ps: $ps")
    correct = zeros(nworkers)
    correct[1:nslow] .= 320.0
    correct[nslow+1:end] .= 160.0
    for i in 1:nworkers
        @test ps[i] ≈ correct[i] rtol=0.1
    end

    # check that the avg. latency is uniform (within some margin)
    ms = comp_mcs .* θs ./ ps .+ comm_mcs
    println("ms: $ms")    
    μ = mean(ms)
    for i in 1:nworkers
        @test ms[i] ≈ μ rtol=0.1
    end    
end

@testset "optimizer (comp. much higher than comm.)" begin
    nworkers = 9
    nwait = nworkers
    nsubpartitions = 160.0
    θs = fill(1/nworkers, nworkers)
    ps = fill(nsubpartitions, nworkers)

    # values recorded on eX3 with low variance and very low comm. latency relative to comp.
    comp_mcs = [255.07814185599995, 235.33940168554452, 253.72451957702958, 116.82766857029705, 116.75048824871284, 116.63288112475249, 126.99890071128709, 126.4382596942574, 117.12455760475244]
    comp_vcs = [0.0027557071631392205, 0.003592251480945663, 0.002281988669487589, 0.0007248118462346298, 0.0005408877863892769, 0.0005133790987450482, 0.0005865578758950107, 0.0006378358097673953, 0.0005586345559702721]    
    comm_mcs = [3.373097029702779e-5, 3.189267326732839e-5, 3.427457425742762e-5, 3.50826633663372e-5, 3.664775247524789e-5, 3.760737623762412e-5, 3.5680287128712425e-5, 3.737996039603971e-5, 3.6443900990098125e-5]
    comm_vcs = [1.4755830783262175e-12, 1.5582646160146614e-12, 1.3494372741908877e-12, 2.0233815302431064e-12, 2.7092806020993726e-12, 2.554836195077552e-12, 1.7668490363708934e-12, 1.5867281370452314e-12, 1.8507092575245513e-12]    
    
    sim_nwait = floor(Int, nworkers/2)
    comp_distributions = [Gamma() for _ in 1:nworkers]
    comm_distributions = [Gamma() for _ in 1:nworkers]    
    sim = EventDrivenSimulator(;nwait=sim_nwait, nworkers, comm_distributions, comp_distributions)
    min_processed_fraction = sim_nwait / nworkers / nsubpartitions

    # balanced mode
    ps, loss, loss0 = CodedComputing.optimize!(ps, ps, sim; θs, comp_mcs, comp_vcs, comm_mcs, comm_vcs, min_processed_fraction, time_limit=2)
    println("ps: $ps")
    @test loss < Inf

    # check that the avg. latency is uniform (within some margin)    
    ms = comp_mcs .* θs ./ ps .+ comm_mcs
    println("ms: $ms")
    μ = mean(ms)
    for i in 1:nworkers
        @test ms[i] ≈ μ rtol=0.1
    end

    # aggressive mode
    ps .= nsubpartitions
    ps, loss, loss0 = CodedComputing.optimize!(ps, ps, sim; θs, comp_mcs, comp_vcs, comm_mcs, comm_vcs, min_processed_fraction, time_limit=2, aggressive=true, min_latency=-1.0)
    println("ps: $ps")
    @test minimum(ps) ≈ 160.0
    ms = comp_mcs .* θs ./ ps .+ comm_mcs
    println("ms: $ms")    
    μ = mean(ms)
    for i in 1:nworkers
        @test ms[i] ≈ μ rtol=0.1
    end
end

@testset "optimizer (comp. same as comm.)" begin
    nworkers = 9
    nwait = nworkers
    nsubpartitions = 160.0
    θs = fill(1/nworkers, nworkers)
    ps = fill(nsubpartitions, nworkers)

    # values recorded on eX3 with low variance and very low comm. latency relative to comp.
    comp_mcs = [255.07814185599995, 235.33940168554452, 253.72451957702958, 116.82766857029705, 116.75048824871284, 116.63288112475249, 126.99890071128709, 126.4382596942574, 117.12455760475244]
    comp_vcs = [0.0027557071631392205, 0.003592251480945663, 0.002281988669487589, 0.0007248118462346298, 0.0005408877863892769, 0.0005133790987450482, 0.0005865578758950107, 0.0006378358097673953, 0.0005586345559702721]    
    comm_mcs = copy(comp_mcs)
    comm_vcs = copy(comp_vcs)
    
    sim_nwait = floor(Int, nworkers/2)
    comp_distributions = [Gamma() for _ in 1:nworkers]
    comm_distributions = [Gamma() for _ in 1:nworkers]        
    sim = EventDrivenSimulator(;nwait=sim_nwait, nworkers, comm_distributions, comp_distributions)
    min_processed_fraction = sim_nwait / nworkers / nsubpartitions

    # balanced mode
    ps, loss, loss0 = CodedComputing.optimize!(ps, ps, sim; θs, comp_mcs, comp_vcs, comm_mcs, comm_vcs, min_processed_fraction, time_limit=2)
    println("ps: $ps")
    @test loss < Inf

    # check that the avg. latency is uniform (within some margin)    
    ms = comp_mcs ./ ps .+ comm_mcs
    println("ms: $ms")        
    μ = mean(ms)
    for i in 1:nworkers
        @test ms[i] ≈ μ rtol=0.5
    end

    # aggressive mode
    ps .= nsubpartitions
    ps, loss, loss0 = CodedComputing.optimize!(ps, ps, sim; θs, comp_mcs, comp_vcs, comm_mcs, comm_vcs, min_processed_fraction, time_limit=2, aggressive=true, min_latency=-1.0)
    @test minimum(ps) ≈ 160.0
    # ms = comp_mcs .* θs ./ ps .+ comm_mcs
    # μ = mean(ms)
    # for i in 1:nworkers
    #     @test ms[i] ≈ μ rtol=0.1
    # end    
end

@testset "optimizer (comp. much higher than comm.)" begin
    nworkers = 72
    nwait = nworkers
    nsubpartitions = 80.0
    θs = fill(1/nworkers, nworkers)
    ps = fill(nsubpartitions, nworkers)

    # values recorded on AWS with low variance and low comm. latency relative to comp.
    comp_mcs = [83.83719400727274, 84.56425873454548, 83.24744768000001, 85.09492904727274, 86.62222161454545, 86.56492212363639, 84.18081268363638, 83.2964639418182, 83.63603345454547, 85.52723904, 85.89885661090909, 78.39971525818183, 93.71899182545458, 85.06894481454546, 85.09361448727273, 86.73630545454546, 85.32156596363637, 84.40723630545455, 84.44267933090909, 82.6533564509091, 84.94617053090911, 84.90497064727273, 84.32782423272727, 84.80634338909091, 84.74789800727272, 90.32809192727272, 84.78158516363638, 79.42350749090909, 86.52342138181817, 84.51160738909093, 84.64746606545455, 84.11714967272728, 84.18197172363638, 84.91479365818182, 83.04630289454546, 86.9430754327273, 84.56391953454548, 82.88443828363637, 86.16268706909094, 84.96690315636366, 85.49810461090908, 84.27044596363636, 84.09113727999998, 84.44407127272729, 85.21930240000002, 84.55733469090909, 85.48306798545454, 85.43646283636365, 84.59088482909092, 89.27814429090911, 85.69318813090909, 82.89300008727272, 84.66070068363636, 84.22216052363638, 84.26186385454547, 84.2088694109091, 87.36550842181819, 84.30621387636366, 83.68611566545457, 84.92868846545456, 83.99821399272729, 84.27077440000001, 91.8733388218182, 84.28995083636363, 85.13140084363637, 86.28002333090912, 85.47884549818181, 85.11117451636365, 83.85590574545455, 84.5384607418182, 83.28374976, 84.23413847272728]
    comp_vcs = [0.0011421443791165577, 0.001965937010903701, 0.001080289134005863, 0.0015147010681869218, 0.0019543853740587075, 0.0018525280119243218, 0.0010717424262526945, 0.0013552023930692842, 0.0013218279306052023, 0.001646853834402909, 0.0011971988786598198, 0.0008171234908152827, 0.0011180002317882714, 0.0014849310589688388, 0.0013503309833066961, 0.002003399670388999, 0.002229045828245602, 0.0016310696849770677, 0.0013699264700789177, 0.001313373340831927, 0.001440510953185439, 0.0015190398374354923, 0.0012164160375029052, 0.0008306335177574833, 0.0011758994786901626, 0.0010003010861745945, 0.0013473881742654802, 0.0007348181667276463, 0.0023673479141235, 0.0012086931203448797, 0.0008219273744405475, 0.0012246601989724356, 0.0011504895403956735, 0.0013126575204895218, 0.0010350639226623624, 0.001785326509537193, 0.0013303620153629623, 0.0009981376354634575, 0.0017964488424443016, 0.001630187729733738, 0.0017519484032818982, 0.001787923696131851, 0.0014579672492872793, 0.001153181321664806, 0.0013350055705060714, 0.0011140041528969352, 0.0011822385440088466, 0.001246437813973071, 0.0009866541269556797, 0.0007728917443144192, 0.0014659113197203564, 0.0013141219658085656, 0.0013415545268761183, 0.001504927399968425, 0.000906065910986086, 0.0010870860165416388, 0.0012550196169302695, 0.0008419391399846764, 0.0010460085177690004, 0.0015293742748779598, 0.0009529932101843303, 0.0014254519016226395, 0.0008692140107794807, 0.0008258379861804196, 0.0017921203526416393, 0.0013239507762105058, 0.001927217880471291, 0.0016084685805719378, 0.0008582012743286067, 0.0014071052024702247, 0.0012597131371129017, 0.0013191295808503373]
    comm_mcs = [0.0003480254545454544, 0.0003319341919191919, 0.00026587455555555564, 0.00034138355555555556, 0.00040316833333333324, 0.00039426245454545454, 0.0003415080000000001, 0.0003219556666666666, 0.0003220089191919191, 0.00038495763636363644, 0.0004099111616161616, 0.0002096090606060607, 0.0002259690404040403, 0.00036263934343434346, 0.00039680437373737374, 0.00037868467676767685, 0.00036656339393939405, 0.0003677447070707071, 0.00035856226262626247, 0.0003042973535353536, 0.0003993650808080807, 0.00041439392929292927, 0.00040552959595959587, 0.00040939215151515157, 0.00041946872727272706, 0.0003035104040404039, 0.00041239234343434355, 0.0002445649797979797, 0.0003739147373737374, 0.00042839323232323243, 0.0004370764949494949, 0.00038970366666666657, 0.0004284080202020202, 0.00043861960606060595, 0.00041204406060606067, 0.00039340965656565655, 0.00044712492929292936, 0.0004082409797979797, 0.00039524609090909083, 0.00043600814141414135, 0.0004214690303030302, 0.00044303437373737376, 0.0004123091818181818, 0.000435883898989899, 0.0004593682323232322, 0.0004801075656565655, 0.00043758155555555554, 0.0004502059090909091, 0.0004367451515151514, 0.00026511119191919186, 0.000407111090909091, 0.00044593664646464643, 0.00044228803030303015, 0.000437117595959596, 0.0004675319797979798, 0.0004789977070707069, 0.00035643654545454537, 0.0004665113030303031, 0.00044163787878787893, 0.00040496073737373753, 0.0004637384646464644, 0.0004160973030303031, 0.00020500094949494935, 0.0004884162121212122, 0.0004058337979797981, 0.0003695217171717172, 0.00039872561616161625, 0.00041293092929292917, 0.0004977244747474749, 0.0004509595252525253, 0.00046671063636363655, 0.00047462048484848474]
    comm_vcs = [5.740965332390451e-8, 4.345452720940765e-8, 2.0897826589721686e-8, 3.9728614195903475e-8, 4.783874768185863e-8, 4.746413291931858e-8, 4.628794348258591e-8, 4.656202443670707e-8, 2.7572550612902546e-8, 4.70896132374031e-8, 4.235644613027693e-8, 1.8075039649862175e-9, 8.830231602806428e-9, 3.322531477545785e-8, 5.105769057712298e-8, 3.608274134141073e-8, 3.91950921956125e-8, 4.6208766182308144e-8, 4.083966421352698e-8, 2.4841435527885144e-8, 4.3822700146215706e-8, 4.882312347214655e-8, 4.320883324624073e-8, 3.7677578237199255e-8, 5.280018543405695e-8, 1.924283053094787e-8, 5.917481436683162e-8, 6.488923716141019e-9, 3.19733472787795e-8, 5.665397354431981e-8, 4.2398035149946876e-8, 3.4169793846282844e-8, 4.8652965888928915e-8, 4.50717038498953e-8, 6.389193203478423e-8, 4.8686624690387e-8, 4.9491465989298095e-8, 5.2208408375938995e-8, 3.4346688861133144e-8, 4.8051166583576e-8, 4.31302555697668e-8, 4.834922571694111e-8, 5.623120069057301e-8, 4.2799384903242254e-8, 5.000090975007734e-8, 5.391810740503352e-8, 4.341524975719643e-8, 5.440975129410279e-8, 4.470642305651242e-8, 1.1782371344862134e-8, 4.785839480238568e-8, 6.184400377152143e-8, 5.0141780705342516e-8, 5.53503587409074e-8, 4.327395670434303e-8, 5.5518941104974865e-8, 3.039298803533887e-8, 4.6083321766938514e-8, 4.0201333080389357e-8, 3.993063539980984e-8, 5.314513615560225e-8, 4.481117759217081e-8, 9.494668103913932e-10, 5.5252223501763073e-8, 4.202337081874707e-8, 3.7601071229576554e-8, 4.208200520001426e-8, 3.801127667739909e-8, 5.5409340272451336e-8, 4.8944886495683677e-8, 5.7064170423605156e-8, 5.956194455121953e-8]

    sim_nwait = floor(Int, nworkers/2)
    comp_distributions = [Gamma() for _ in 1:nworkers]
    comm_distributions = [Gamma() for _ in 1:nworkers]    
    sim = EventDrivenSimulator(;nwait=sim_nwait, nworkers, comm_distributions, comp_distributions)
    min_processed_fraction = sim_nwait / nworkers / nsubpartitions

    # balanced mode
    ps, loss, loss0 = CodedComputing.optimize!(ps, ps, sim; θs, comp_mcs, comp_vcs, comm_mcs, comm_vcs, min_processed_fraction, time_limit=2)
    @test loss < Inf

    # # check that the avg. latency is uniform (within some margin)    
    ms = comp_mcs .* θs ./ ps .+ comm_mcs
    # println("ms: $(sort(ms))")
    μ = mean(ms)
    for i in 1:nworkers
        @test ms[i] ≈ μ rtol=0.1
    end

    # # aggressive mode
    ps .= nsubpartitions
    ps, loss, loss0 = CodedComputing.optimize!(ps, ps, sim; θs, comp_mcs, comp_vcs, comm_mcs, comm_vcs, min_processed_fraction, time_limit=2, aggressive=true, min_latency=-1.0)
    @test minimum(ps) ≈ 80.0
    # ms = comp_mcs .* θs ./ ps .+ comm_mcs
    # println("ms: $(sort(ms))")    
    # μ = mean(ms)
    # for i in 1:nworkers
    #     @test ms[i] ≈ μ rtol=0.1
    # end
end

@testset "optimizer (comp. much higher than comm.)" begin
    nworkers = 108
    nwait = nworkers
    nsubpartitions = 10.0
    θs = fill(1/nworkers, nworkers)
    ps = fill(nsubpartitions, nworkers)

    # values recorded on AWS with low variance and low comm. latency relative to comp.
    # first run
    comp_mcs = [0.2734740654545455, 0.26846762727272727, 0.2845463563636364, 0.2740031672727273, 0.2634315218181818, 0.26994186000000003, 0.27106060909090907, 0.2798729345454545, 0.28341479454545454, 0.2853871036363636, 0.2836058236363636, 0.27191619818181817, 0.27862846363636357, 0.30009834, 0.28472930181818185, 0.2760987272727273, 0.2632338490909091, 0.25189481454545454, 0.2650328836363636, 0.29026781999999995, 0.2674807527272727, 0.26993704909090904, 0.2930921509090909, 0.3350625218181818, 0.2789818527272727, 0.2763738163636364, 0.2970233345454546, 0.2680460509090909, 0.2933524472727272, 0.2827284218181818, 0.28584191454545455, 0.27539689090909086, 0.29311523999999994, 0.27374743636363635, 0.28170124363636356, 0.2803953436363636, 0.28305309272727275, 0.2625814309090909, 0.29355746727272725, 0.25859809636363634, 0.2967710563636363, 0.29052265090909085, 0.2979647345454545, 0.27210110727272724, 0.2958125890909091, 0.2894656581818182, 0.28769851636363636, 0.2896732309090909, 0.29004532363636365, 0.3498175309090909, 0.2807024072727273, 0.28518376909090914, 0.2940749509090909, 0.29421029454545455, 0.2818771527272727, 0.2717669618181818, 0.2763942381818182, 0.27614320363636363, 0.2938787018181818, 0.2789028490909091, 0.2897578145454545, 0.32740329272727275, 0.2759820218181818, 0.2756452581818182, 0.30284679272727266, 0.2772680072727272, 0.27552166363636366, 0.2752212109090909, 0.2862640636363637, 0.2874734018181818, 0.27256158, 0.2803379236363636, 0.28641766909090904, 0.2764120745454545, 0.28016137636363636, 0.27479968363636365, 0.27114876, 0.28538558181818185, 0.2790738, 0.27606078, 0.2808723763636364, 0.26325044181818186, 0.2535018054545454, 0.27958167818181817, 0.26107350545454544, 0.2843727545454545, 0.2946564981818182, 0.2871746836363636, 0.27641760545454547, 0.26881456909090906, 0.27825800727272726, 0.29775402, 0.27394818545454547, 0.2781129109090909, 0.27541431818181816, 0.2910093872727273, 0.3175030145454545, 0.2909555836363636, 0.30573759272727274, 0.26431314545454543, 0.29641686545454543, 0.26787498545454547, 0.3116245909090909, 0.2762499927272727, 0.27801036, 0.2779663581818182, 0.29150448545454544, 0.27839901272727274]
    comp_vcs = [1.0501207152382053e-8, 1.8851552341768853e-8, 1.4402058029708699e-8, 2.3405295457157977e-8, 2.638062017378223e-8, 2.4902372702763007e-8, 2.2895896432283862e-8, 1.784581824699485e-8, 5.1467660218713495e-8, 2.6399398816119644e-8, 5.603734942342736e-8, 3.220800094833607e-8, 2.08747421069855e-8, 3.391087406999548e-8, 6.866379759466344e-8, 1.4496487788100729e-8, 1.0207004250459934e-8, 2.311123663241633e-8, 1.0722585204271987e-8, 4.094619002995188e-8, 1.806345581353277e-8, 3.0583010315979884e-8, 5.404078337778353e-8, 2.255504260330213e-6, 1.1681289530782635e-8, 2.0953068092480643e-8, 9.139635637783641e-8, 4.3334552962291314e-8, 1.2556529311539416e-7, 1.4494340522011834e-8, 9.797892689875336e-8, 2.898013115506387e-8, 8.553585403636493e-8, 2.606302126606497e-8, 4.026828181881816e-8, 4.990309972878763e-8, 2.776751270896474e-8, 1.7233319992324375e-8, 4.627219009814402e-8, 2.0714855830688455e-8, 4.8294252016182495e-8, 4.135574965681945e-8, 5.2340241061472653e-8, 1.2315476559927418e-8, 2.2713989373247226e-8, 3.46258074784226e-8, 2.1519559709795013e-8, 3.7736981032339585e-8, 2.3948936451656977e-8, 2.643636162747814e-6, 2.772001242448371e-8, 5.054904862138827e-8, 8.592375029784925e-8, 3.748973939609061e-8, 1.1783276102078502e-7, 1.1741683984719782e-8, 3.587265346834882e-8, 3.0589212477011274e-8, 4.1333690772898035e-8, 4.859142309056536e-8, 2.852687305783053e-8, 1.2182591753089278e-6, 2.6262253038258194e-8, 2.5757089518356545e-8, 1.6054884363176866e-7, 1.1885198813551992e-8, 1.833887321969936e-8, 3.0765772773234056e-8, 4.8639808314317233e-8, 2.790228155923264e-8, 1.9238385651782083e-8, 3.6355284924253746e-8, 2.292884028588869e-8, 1.9345854767826545e-8, 3.7693258467125517e-8, 1.615291010969883e-8, 3.25225015635974e-8, 3.3300739038264284e-8, 2.3483716374500876e-8, 2.3926747077241393e-8, 3.184077673611563e-8, 1.692879352293479e-8, 1.9141847218738875e-8, 1.6970901850149405e-8, 1.5633514228725713e-8, 1.0489299169512704e-7, 4.117796704562282e-8, 3.203645819701878e-8, 3.843566151695522e-8, 1.263061943225605e-8, 6.210906807179459e-8, 3.5814323670081954e-8, 9.158946955985735e-9, 2.1743526090528195e-8, 2.8382942824742188e-8, 1.6981834708920803e-8, 8.2366937592348e-8, 3.1505579448857634e-8, 8.224410199538868e-8, 1.4485209050581053e-8, 3.0554752283265974e-8, 2.5605664163286376e-8, 3.483294538138976e-8, 6.92318465008758e-8, 2.0473269970959344e-8, 3.431216753378621e-8, 3.088815558966655e-8, 2.1358846010759353e-8]
    comm_mcs = [0.020527885893939394, 0.02174878728787879, 0.02347771484848485, 0.01744793277272727, 0.02392204665151515, 0.015964665469696968, 0.020948033484848482, 0.021427584363636364, 0.022120655045454542, 0.021226820984848484, 0.02143560656060606, 0.012112109121212121, 0.021411399409090908, 0.021382727181818186, 0.022065514727272733, 0.020744995636363634, 0.021402168424242425, 0.02080790984848485, 0.022220805590909092, 0.021461548287878787, 0.020770689606060606, 0.02262658468181818, 0.02101595287878788, 0.01980213509090909, 0.021595702318181816, 0.02034816813636364, 0.02038311075757576, 0.021225970893939395, 0.016712652454545455, 0.02109570651515152, 0.02072173459090909, 0.020838297984848486, 0.015310745515151514, 0.014923250893939394, 0.017961288303030305, 0.0245065335, 0.022451245848484847, 0.024583279363636367, 0.020334403924242423, 0.020909498272727273, 0.027300031136363638, 0.02807682133333333, 0.02036326612121212, 0.019520167924242424, 0.019872202606060606, 0.020607004984848482, 0.020716484393939395, 0.020812893606060607, 0.021456629757575757, 0.021312822727272723, 0.021208796227272727, 0.020616452863636364, 0.012650536606060607, 0.020525659954545455, 0.019471103545454543, 0.01993640103030303, 0.020830905181818182, 0.020142426272727276, 0.01970495074242424, 0.019328818954545458, 0.018714486136363635, 0.018564471393939394, 0.011155735303030302, 0.020245134787878784, 0.018659716136363635, 0.020378126727272728, 0.0193235841969697, 0.023301455121212122, 0.019359793196969698, 0.019987275106060604, 0.019756426999999997, 0.019702085484848485, 0.019156225242424243, 0.01857880806060606, 0.020745189757575756, 0.02081883421212121, 0.02491620295454545, 0.019894534893939393, 0.024937468999999997, 0.019543741984848484, 0.012110012515151515, 0.019033852181818182, 0.020151511818181814, 0.016032879621212123, 0.01958354321212121, 0.019207566454545452, 0.019679614545454548, 0.01942848824242424, 0.015353549909090908, 0.019917568378787876, 0.01640477362121212, 0.019002854, 0.016230259272727275, 0.016491157166666666, 0.018922700151515152, 0.018338922454545454, 0.01958322275757576, 0.018752550727272724, 0.020812864318181818, 0.019503761393939393, 0.01868957228787879, 0.014964718151515151, 0.019189075454545457, 0.018914960454545455, 0.023214000878787878, 0.01956908371212121, 0.02031683074242424, 0.019978120424242428]
    comm_vcs = [7.71376002057562e-6, 8.71161570145597e-6, 2.8190724466371103e-5, 3.9719288139365954e-5, 0.0005753248919525802, 4.913796914497026e-5, 1.0755009979606647e-5, 9.727770092796291e-6, 1.9406524720763066e-5, 1.1738858929508642e-5, 3.9992859710382344e-5, 2.4420476825285297e-5, 1.1307005384615719e-5, 8.091123181673847e-6, 8.33634134964512e-6, 1.1639064012289313e-5, 6.178913376882124e-6, 1.0300770298189092e-5, 1.9927417715699365e-5, 8.503712374300211e-6, 9.727399626528385e-6, 2.4153905445686375e-5, 1.2192690738876098e-5, 2.1211294849250088e-5, 4.920057596816802e-6, 8.04111463461655e-6, 5.894557464110946e-6, 8.986336051485736e-6, 3.981947342056384e-5, 9.387594171940351e-6, 1.2595277045219296e-5, 1.0208496245788e-5, 4.5691094966205195e-5, 3.470611993002209e-5, 3.127369436582467e-5, 0.0005724459955333816, 5.3675537422206336e-5, 0.0005742912112955992, 1.1103775987495444e-5, 9.78835314429966e-6, 0.0010936961450293166, 0.0011071212295597449, 1.2934475903265724e-5, 5.67176992603056e-5, 1.139375675464425e-5, 1.0732607304354542e-5, 2.1253496550510014e-5, 9.436299986696219e-6, 1.1573016794500868e-5, 0.0012040727650579344, 9.14350670057259e-6, 8.096401559868282e-6, 4.020896704354129e-5, 1.121314543414486e-5, 1.3904256655469034e-5, 1.0232205467691844e-5, 6.645106038548061e-6, 2.694378026081069e-5, 7.264595740071847e-6, 8.799639514931498e-6, 1.1827449545892489e-5, 1.6925375944290446e-5, 2.8347512611144983e-5, 1.1631444587339502e-5, 1.1470260567731478e-5, 2.8997342849940448e-5, 1.0527820660567852e-5, 0.0005683750190482453, 0.0006254082464278202, 7.439286544803545e-6, 1.5788032986363565e-5, 9.671376483652355e-6, 8.561552872064944e-6, 1.0328151238873516e-5, 7.075935261477472e-6, 9.986104450478942e-6, 0.0011409563453643385, 7.254796014143376e-6, 0.0023614010559375722, 9.310955540719145e-6, 4.271290692019929e-5, 8.595515792484158e-6, 9.069558398619557e-6, 2.7609456304581793e-5, 1.0688735704673523e-5, 8.122673646795736e-6, 8.612749007113078e-6, 5.137047281338785e-6, 4.232986702984597e-5, 8.829800139200142e-6, 4.075932060277948e-5, 1.043649709147026e-5, 3.269164163633998e-5, 3.677718787234945e-5, 7.4610275460705155e-6, 2.698363211767516e-5, 5.51708690221445e-6, 7.502742820639143e-6, 2.772923821453354e-5, 5.991794709083375e-6, 7.957706096316675e-6, 4.419551973399062e-5, 7.004632328505328e-6, 7.520092479142517e-6, 0.0005703265870964341, 9.18612559371463e-6, 7.173339228648773e-6, 6.505005542154429e-6]

    # final run
    # comp_mcs = [0.20422057254545453, 0.21173800581818183, 0.21401798400000002, 0.22273938, 0.2172123, 0.2537461963636364, 0.214102008, 0.2779821818181818, 0.18978948654545455, 0.26368190836363636, 0.21862661890909094, 0.2732298381818182, 0.2069654072727273, 0.2019467094545455, 0.22083914618181819, 0.2803177145454545, 0.22143586909090907, 0.1810680250909091, 0.18934112618181817, 0.24195764290909094, 0.2308448258181818, 0.20469919909090908, 0.3047471509090909, 0.1784910992727273, 0.21706992654545454, 0.2048134041818182, 0.2116733432727273, 0.19259661272727274, 0.28967172545454545, 0.20151048763636364, 0.2546623112727273, 0.21118045581818184, 0.21111644127272727, 0.1954653512727273, 0.22860258545454545, 0.24739916727272732, 0.2643333774545455, 0.20072683145454545, 0.22507436290909094, 0.20567243127272727, 0.22299984654545454, 0.20795681290909093, 0.2360373709090909, 0.253826928, 0.29560374, 0.2433276818181818, 0.28733440909090907, 0.27874407763636366, 0.2888385709090909, 0.23483648454545455, 0.21934412509090911, 0.2509306952727273, 0.23637053454545454, 0.2916787418181818, 0.2512377687272727, 0.24965083636363636, 0.2818417909090909, 0.2891189127272727, 0.2967786490909091, 0.23574253745454546, 0.2893923327272727, 0.2727904418181818, 0.26586868581818185, 0.2764206981818182, 0.2832569999999999, 0.27744126545454545, 0.27870556909090904, 0.27364843636363634, 0.2868718418181818, 0.286837249090909, 0.2765650418181818, 0.2818675145454545, 0.2890694127272727, 0.28247909400000004, 0.27502042909090907, 0.27265514727272727, 0.2718602509090909, 0.2863381909090909, 0.29077859454545457, 0.2662206823636364, 0.27772296545454545, 0.26379122727272725, 0.2565015381818182, 0.27901045636363636, 0.26207909999999995, 0.28075257818181815, 0.2960112109090909, 0.29073550909090906, 0.27463292181818183, 0.2705488527272727, 0.2813953090909091, 0.29580335999999996, 0.27345922363636366, 0.2787824945454545, 0.28044934363636365, 0.28962605454545454, 0.3169950381818182, 0.29481044727272726, 0.3030975327272727, 0.2673626563636364, 0.29640406909090905, 0.26694935999999997, 0.3160306472727273, 0.2761090690909091, 0.2760040309090909, 0.2789657509090909, 0.29367796909090904, 0.2783378454545454]
    # comp_vcs = [1.5985727793734177e-8, 2.0362900968651145e-8, 2.18487214997151e-8, 2.0567932990935792e-8, 1.7202250063725602e-8, 4.19869151619068e-8, 3.5563706865930655e-8, 1.977484600558261e-8, 2.7790272962078914e-8, 2.2823381765622094e-8, 4.0882807242136965e-8, 3.187306318838169e-8, 1.2386524128837851e-8, 4.5696051642895056e-8, 3.349180986589469e-8, 1.778353210236906e-8, 2.316795349183577e-8, 4.389728645542274e-8, 3.082327741811943e-8, 3.050222062367456e-8, 1.0488612603131429e-8, 7.409226065395024e-8, 3.260307677814127e-7, 2.3326582838202126e-8, 2.578924394394948e-8, 1.7553825771264315e-8, 1.608031644734849e-8, 2.4553566723193405e-8, 5.253040388058497e-8, 3.1477988842896695e-8, 1.7104642754635965e-8, 8.902850641746038e-8, 2.047408178168812e-8, 1.5905202302700936e-8, 2.98837986139602e-8, 3.08771155650185e-8, 4.9771489456804183e-8, 1.4262607541239234e-8, 5.0937571141737234e-8, 1.4195455173534113e-8, 2.5549229500286216e-8, 1.4337999476230195e-8, 2.740898354827259e-8, 1.676486939121988e-8, 5.442473953906862e-8, 3.99664482706862e-8, 2.4225754050515936e-8, 4.298719201786686e-8, 1.7753171384075786e-8, 3.785218661063884e-8, 1.717334583675907e-8, 6.936117448287453e-8, 3.661184581394729e-8, 2.1225393318353948e-8, 9.840954295338119e-8, 1.9945859970683694e-8, 8.906462076324075e-8, 2.5605685868633043e-7, 4.2479822206798737e-8, 4.471397601742903e-8, 2.947998491639194e-8, 2.520367528285742e-8, 2.7546356296161015e-8, 1.916705365284004e-8, 3.5770187388985586e-8, 1.2809900057825273e-8, 3.138848279228134e-8, 3.472448183707781e-8, 3.692897569016688e-8, 4.1604014665034476e-8, 2.4897411926534186e-8, 3.8286994749636184e-8, 3.7501518825383486e-8, 2.1428767637760092e-8, 3.6291661009591066e-8, 1.8727779738125262e-8, 5.0084868573216325e-8, 3.668339131960544e-8, 2.1464730370236035e-7, 2.1547066195003054e-8, 3.663056114606067e-8, 1.6110987574472022e-8, 3.603345192196197e-8, 1.3918098125222165e-8, 1.6395834357270335e-8, 7.329373670376743e-8, 3.281042118044293e-8, 4.010894670049021e-8, 1.8466267461068452e-8, 2.598983535994487e-8, 1.2285458726776896e-7, 3.5688281694505695e-8, 1.4422772405195405e-8, 1.848029435604331e-8, 5.344713920160844e-8, 2.7380055192400264e-8, 5.8695839584782875e-8, 4.484345798086962e-8, 9.258248041817227e-8, 2.4854756121634098e-8, 6.043554194779975e-8, 2.8774387909083184e-8, 7.0806476420792e-8, 2.4291250729614007e-8, 1.5569266246831764e-8, 2.956931341418351e-8, 3.277546554868356e-8, 3.401005466603668e-8]
    # comm_mcs = [0.016817047924242424, 0.022390123545454547, 0.02117802533333333, 0.021792312499999997, 0.019557934227272727, 0.022036537893939393, 0.020913217818181822, 0.017318169863636365, 0.022048808848484848, 0.02279425834848485, 0.02262332963636364, 0.02118129265151515, 0.021606267878787878, 0.021565177212121207, 0.021424157954545452, 0.014613006515151516, 0.021437037075757576, 0.02226708787878788, 0.02159766884848485, 0.021226646227272723, 0.022128312363636365, 0.014610753106060607, 0.018166496393939392, 0.021591593484848483, 0.02209294363636364, 0.015541581106060604, 0.02088713981818182, 0.020776359424242424, 0.02200952696969697, 0.021219980151515154, 0.020881483303030305, 0.020514159409090908, 0.02152550207575758, 0.02034375418181818, 0.02089673946969697, 0.023095562575757574, 0.02210786231818182, 0.02197175040909091, 0.02062620315151515, 0.024486439575757572, 0.017679930545454543, 0.021914590666666664, 0.02218169990909091, 0.02163494018181818, 0.014867999924242424, 0.0205003655, 0.021805975348484847, 0.021543356606060604, 0.02156852477272727, 0.020901693590909088, 0.021139039833333335, 0.021090925863636364, 0.022003214681818182, 0.011182012727272728, 0.022154315242424238, 0.020790769121212117, 0.021041478818181816, 0.02108642603030303, 0.020123628742424245, 0.020915269, 0.020840141939393937, 0.020599151545454542, 0.02036433553030303, 0.02084936406060606, 0.02057113928787879, 0.019991385378787883, 0.021506807348484848, 0.02086591753030303, 0.021256297803030302, 0.012048843393939393, 0.021327969136363638, 0.021486669166666666, 0.02286474081818182, 0.020690889121212124, 0.021026264515151515, 0.021107827545454545, 0.016701854181818184, 0.018866789499999998, 0.020616583984848485, 0.020170601803030305, 0.014101163590909092, 0.020945521409090912, 0.02049578646969697, 0.0207324311969697, 0.01948232865151515, 0.0211370625, 0.020279153166666668, 0.020775804666666668, 0.020872609363636368, 0.020752548681818184, 0.021848408924242422, 0.021850558969696964, 0.018542634136363638, 0.021040479924242423, 0.01743237515151515, 0.01153971303030303, 0.020218767136363634, 0.019356429469696967, 0.020624941393939392, 0.019591966075757576, 0.018545583060606063, 0.02035103565151515, 0.020100715136363634, 0.014876829878787879, 0.01978801296969697, 0.019835608606060606, 0.01937048190909091, 0.022265741045454545]
    # comm_vcs = [3.9149919007336255e-5, 7.7728822549069e-6, 1.3572805721484267e-5, 1.1080841076667848e-5, 3.011235514425954e-5, 1.2305352037707035e-5, 1.2414516237681326e-5, 5.1343332354603175e-5, 1.1500317719030889e-5, 1.0054719741556186e-5, 1.2417124532304851e-5, 9.99535387052067e-6, 1.171053635541018e-5, 1.0388170517629052e-5, 1.321867710488069e-5, 4.1990963072978946e-5, 1.0552942454573899e-5, 1.0004311799341535e-5, 8.783626293229789e-6, 6.148463982182139e-6, 8.849430378044735e-6, 4.6659032036927556e-5, 4.818237247420314e-5, 9.20898320812681e-6, 9.619625882269125e-6, 3.6067181148143935e-5, 2.030073786527301e-5, 1.365723814219865e-5, 1.3193646755876062e-5, 1.0775585801463088e-5, 1.3285039371505167e-5, 1.4793033832011986e-5, 9.957225688716684e-6, 1.0566923395831742e-5, 1.1543414795093978e-5, 2.2258755396226734e-5, 7.342532213365635e-6, 7.085229906041623e-6, 1.7958414583257257e-5, 0.0005553925898552982, 3.530898676010674e-5, 1.1357893457705911e-5, 6.6688293140382705e-6, 1.0136820727061886e-5, 4.418003399456449e-5, 1.4519360357910939e-5, 1.3262810296742244e-5, 8.3112951070254e-6, 9.435430649351703e-6, 1.260175216791958e-5, 1.0717405339878293e-5, 8.804972935102173e-6, 7.953754305290535e-6, 2.1968441716165385e-5, 8.17601352859148e-6, 7.841414180477155e-6, 9.814886125336544e-6, 5.817763162734859e-6, 8.359381767434769e-6, 1.3123831940002812e-5, 1.1799625871356369e-5, 7.046743176851358e-6, 2.447534359002507e-5, 1.3123493919201575e-5, 1.377334174764664e-5, 1.4894592817106815e-5, 8.422414170017464e-6, 1.4538331975245716e-5, 9.184902033865217e-6, 3.608541329714276e-5, 7.820549663522722e-6, 2.116927737035631e-5, 0.0005640323634603756, 1.3819762419048506e-5, 1.4302612339316188e-5, 9.10291335741079e-6, 9.44112266811152e-5, 2.9302223792074863e-5, 8.897768299658817e-6, 1.3051022950536526e-5, 4.602664233821824e-5, 1.4445349538059929e-5, 1.0528826073334023e-5, 6.68028823404027e-6, 3.11536414590576e-5, 7.4633324618593455e-6, 1.1220854772219901e-5, 8.093550865462382e-6, 9.760341271886931e-6, 6.030311833562249e-6, 6.704935676827802e-6, 1.9671756829241552e-5, 2.0598242057025663e-5, 6.102565418547611e-6, 3.249961968096254e-5, 4.006665695039554e-5, 6.876525009382817e-6, 9.666795081479142e-6, 1.1649651558949883e-5, 1.2518874461229222e-5, 1.3588880022261476e-5, 9.696368976829406e-6, 1.5314285892446973e-5, 4.409525500361652e-5, 9.00671631009971e-6, 1.283851314289432e-5, 1.2836785905745007e-5, 1.9138618120398973e-6]    

    # final solution
    # [ Info: epoch 984, worker 1 nsubpartitions 3 => 3
    # [ Info: epoch 984, worker 2 nsubpartitions 4 => 2
    # [ Info: epoch 984, worker 3 nsubpartitions 3 => 3
    # [ Info: epoch 984, worker 4 nsubpartitions 5 => 2
    # [ Info: epoch 984, worker 5 nsubpartitions 5 => 5
    # [ Info: epoch 984, worker 6 nsubpartitions 8 => 3
    # [ Info: epoch 984, worker 7 nsubpartitions 4 => 4
    # [ Info: epoch 984, worker 8 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 9 nsubpartitions 2 => 2
    # [ Info: epoch 984, worker 10 nsubpartitions 8 => 2
    # [ Info: epoch 984, worker 11 nsubpartitions 4 => 4
    # [ Info: epoch 984, worker 12 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 13 nsubpartitions 3 => 3
    # [ Info: epoch 984, worker 14 nsubpartitions 2 => 2
    # [ Info: epoch 984, worker 15 nsubpartitions 4 => 4
    # [ Info: epoch 984, worker 16 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 17 nsubpartitions 5 => 5
    # [ Info: epoch 984, worker 18 nsubpartitions 2 => 2
    # [ Info: epoch 984, worker 19 nsubpartitions 2 => 2
    # [ Info: epoch 984, worker 20 nsubpartitions 6 => 4
    # [ Info: epoch 984, worker 21 nsubpartitions 6 => 4
    # [ Info: epoch 984, worker 22 nsubpartitions 3 => 3
    # [ Info: epoch 984, worker 23 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 24 nsubpartitions 2 => 2
    # [ Info: epoch 984, worker 25 nsubpartitions 4 => 4
    # [ Info: epoch 984, worker 26 nsubpartitions 3 => 3
    # [ Info: epoch 984, worker 27 nsubpartitions 3 => 3
    # [ Info: epoch 984, worker 28 nsubpartitions 2 => 2
    # [ Info: epoch 984, worker 29 nsubpartitions 10 => 9
    # [ Info: epoch 984, worker 30 nsubpartitions 2 => 2
    # [ Info: epoch 984, worker 31 nsubpartitions 8 => 8
    # [ Info: epoch 984, worker 32 nsubpartitions 3 => 3
    # [ Info: epoch 984, worker 33 nsubpartitions 3 => 4
    # [ Info: epoch 984, worker 34 nsubpartitions 2 => 2
    # [ Info: epoch 984, worker 35 nsubpartitions 5 => 5
    # [ Info: epoch 984, worker 36 nsubpartitions 7 => 2
    # [ Info: epoch 984, worker 37 nsubpartitions 8 => 8
    # [ Info: epoch 984, worker 38 nsubpartitions 3 => 3
    # [ Info: epoch 984, worker 39 nsubpartitions 4 => 4
    # [ Info: epoch 984, worker 40 nsubpartitions 4 => 4
    # [ Info: epoch 984, worker 41 nsubpartitions 4 => 4
    # [ Info: epoch 984, worker 42 nsubpartitions 3 => 3
    # [ Info: epoch 984, worker 43 nsubpartitions 5 => 4
    # [ Info: epoch 984, worker 44 nsubpartitions 8 => 8
    # [ Info: epoch 984, worker 45 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 46 nsubpartitions 6 => 6
    # [ Info: epoch 984, worker 47 nsubpartitions 10 => 8
    # [ Info: epoch 984, worker 48 nsubpartitions 9 => 9
    # [ Info: epoch 984, worker 49 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 50 nsubpartitions 5 => 5
    # [ Info: epoch 984, worker 51 nsubpartitions 4 => 4
    # [ Info: epoch 984, worker 52 nsubpartitions 7 => 7
    # [ Info: epoch 984, worker 53 nsubpartitions 5 => 5
    # [ Info: epoch 984, worker 54 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 55 nsubpartitions 7 => 6
    # [ Info: epoch 984, worker 56 nsubpartitions 8 => 8
    # [ Info: epoch 984, worker 57 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 58 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 59 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 60 nsubpartitions 6 => 6
    # [ Info: epoch 984, worker 61 nsubpartitions 10 => 7
    # [ Info: epoch 984, worker 62 nsubpartitions 10 => 9
    # [ Info: epoch 984, worker 63 nsubpartitions 9 => 9
    # [ Info: epoch 984, worker 64 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 65 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 66 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 67 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 68 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 69 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 70 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 71 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 72 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 73 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 74 nsubpartitions 11 => 11
    # [ Info: epoch 984, worker 75 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 76 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 77 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 78 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 79 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 80 nsubpartitions 9 => 9
    # [ Info: epoch 984, worker 81 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 82 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 83 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 84 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 85 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 86 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 87 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 88 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 89 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 90 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 91 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 92 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 93 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 94 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 95 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 96 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 97 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 98 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 99 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 100 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 101 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 102 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 103 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 104 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 105 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 106 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 107 nsubpartitions 10 => 10
    # [ Info: epoch 984, worker 108 nsubpartitions 10 => 7

    # sim_nwait = floor(Int, nworkers/2)
    # comp_distributions = [Gamma() for _ in 1:nworkers]
    # comm_distributions = [Gamma() for _ in 1:nworkers]    
    # sim = EventDrivenSimulator(;nwait=sim_nwait, nworkers, comm_distributions, comp_distributions)
    # min_processed_fraction = sim_nwait / nworkers / nsubpartitions

    # # balanced mode
    # ps, loss, loss0 = CodedComputing.optimize!(ps, ps, sim; θs, comp_mcs, comp_vcs, comm_mcs, comm_vcs, min_processed_fraction, time_limit=2)
    # @test loss < Inf

    # # # check that the avg. latency is uniform (within some margin)    
    # ms = comp_mcs .* θs ./ ps .+ comm_mcs
    # # println("ms: $(sort(ms))")
    # μ = mean(ms)
    # for i in 1:nworkers
    #     @test ms[i] ≈ μ rtol=0.1
    # end

    # # # aggressive mode
    # ps .= nsubpartitions
    # ps, loss, loss0 = CodedComputing.optimize!(ps, ps, sim; θs, comp_mcs, comp_vcs, comm_mcs, comm_vcs, min_processed_fraction, time_limit=2, aggressive=true, min_latency=-1.0)
    # @test minimum(ps) ≈ 80.0
    # ms = comp_mcs .* θs ./ ps .+ comm_mcs
    # println("ms: $(sort(ms))")    
    # μ = mean(ms)
    # for i in 1:nworkers
    #     @test ms[i] ≈ μ rtol=0.1
    # end
end

@testset "smoke-test" begin
    chin, chout = CodedComputing.setup_loadbalancer_channels()

    nworkers = 2
    nwait = 1
    min_processed_fraction = 0.1
    time_limit = 1.0 # must be floating-point
    θs = [0.3, 0.7]
    qs = 1 ./ [2, 3]
    ps = round.(Int, 1 ./ qs)

    # put some random values into the load-balancer input
    Random.seed!(123)
    worker = 1
    v1 = CodedComputing.ProfilerOutput(worker, θs[worker], qs[worker], 2.0, 2.0, 0.1, 0.1)
    push!(chin, v1)

    worker = 2
    v2 = CodedComputing.ProfilerOutput(worker, θs[worker], qs[worker], 1.0, 1.0, 0.1, 0.1)
    push!(chin, v2)

    # start the load-balancer
    task = Threads.@spawn CodedComputing.load_balancer(chin, chout; min_processed_fraction, nwait, nsubpartitions=ps, nworkers, time_limit, min_improvement=1)

    # wait for up to 10 seconds for the input to be consumed
    t0 = time_ns()
    while (time_ns() - t0)/1e9 < 10 && isready(chin)
        sleep(0.1)
    end
    if istaskfailed(task)
        wait(task)
    end
    @test !isready(chin)

    # wait for up to 10 seconds for the subsystem to produce output
    t0 = time_ns()
    while (time_ns() - t0)/1e9 < 10 && !isready(chout)
        sleep(0.1)
    end
    if istaskfailed(task)
        wait(task)
    end

    correct1 = (1, 1)
    correct2 = (2, 7)

    @test isready(chout)
    vout = take!(chout)
    correct = vout.worker == 1 ? correct1 : correct2
    # @test vout == correct
    println(vout)

    @test isready(chout)
    vout = take!(chout)
    correct = vout.worker == 1 ? correct1 : correct2
    # @test vout == correct
    println(vout)

    # stop the profiler
    close(chin)
    close(chout)
    wait(task)
end