#!/bin/sh -l
# Run 
#SBATCH --job-name=latency.jl
#SBATCH --output=latency.out
#SBATCH --nodes=7
#SBATCH --time=600:00

export JULIA_DEPOT_PATH="/shared/.julia/"
date
kernel=/shared/.julia/dev/CodedComputing/src/latency/kernel.jl
output_directory=/shared/.julia/dev/CodedComputing/simulations/latency/210215_v3/
npartitions_all=( 18 36 54)

niterations=50
ncomponents=3
density=0.05
# nwait_all=( 1 3 6 9 12 16 18)
nwait_all=(1 2 3 4 5 6)
timeout=0

for npartitions in "${npartitions_all[@]}"
do
    for nwait in "${nwait_all[@]}"
    do

        # original matrix
        nrows_total=2504
        ncols=1812842
        nbytes=43508208
        nrows=$(($nrows_total / $npartitions))        
        echo "[Latency] p: ${npartitions}, w: ${nwait}"
        /opt/amazon/openmpi/bin/mpirun -n "$SLURM_NTASKS" julia --project ${kernel} "${output_directory}/output $(date).h5" --niterations ${niterations} --nbytes ${nbytes} --nrows ${nrows} --ncols ${ncols} --ncomponents ${ncomponents} --density ${density} --nwait ${nwait} --timeout ${timeout}

        # transposed matrix
        nrows_total=1812842
        ncols=2504
        nbytes=60096
        nrows=$(($nrows_total / $npartitions))        
        echo "Transposed matrix"
        /opt/amazon/openmpi/bin/mpirun -n "$SLURM_NTASKS" julia --project ${kernel} "${output_directory}/output $(date).h5" --niterations ${niterations} --nbytes ${nbytes} --nrows ${nrows} --ncols ${ncols} --ncomponents ${ncomponents} --density ${density} --nwait ${nwait} --timeout ${timeout}        
    done
done

# transposed matrix
nrows_total=1812842
ncols=2504
nbytes=60096
ngenomes_all=( 3 5 10)

for ngenomes in "${ngenomes_all[@]}"
do
    for npartitions in "${npartitions_all[@]}"
    do
        for nwait in "${nwait_all[@]}"
        do
            nrows=$(($nrows_total * $ngenomes / $npartitions))
            echo "[Latency] g: ${ngenomes}, p: ${npartitions}, w: ${nwait}"
            /opt/amazon/openmpi/bin/mpirun -n "$SLURM_NTASKS" julia --project ${kernel} "${output_directory}/output $(date).h5" --niterations ${niterations} --nbytes ${nbytes} --nrows ${nrows} --ncols ${ncols} --ncomponents ${ncomponents} --density ${density} --nwait ${nwait} --timeout ${timeout}        
        done
    done
done